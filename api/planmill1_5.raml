#%RAML 1.0
#IMPORTANT NOTE: Do not remove the mock service URL from the baseUri.
baseUri: https://online.planmill.com/{instance}/api/1.5
title: PlanMill
version: 1.5
protocols: [HTTPS]
mediaType: application/json
securitySchemes:
    oauth_2.0:
       description: |
           PlanMill supports OAuth 2.0 for authenticating all API requests. More information about it in the security part of the documentation.
       type: OAuth 2.0
       describedBy:

           headers:
               Authorization:
                   description: |
                      Used to send a valid OAuth 2 access token.
                   type: string
       settings:
        authorizationUri: https://online.planmill.com/{instance}/api/oauth2/authorize
        accessTokenUri: https://online.planmill.com/{instance}/api/oauth2/token
        authorizationGrants: [authorization_code]
securedBy: [oauth_2.0]
documentation:
  - title: Introduction to PlanMill API 1.5
    content: |
      PlanMill REST API 1.5 enables developers to access some of the core functionality of PlanMill CRM, project management, and ERP products. 
  - title: Getting started with PlanMill API 1.5
    content: |
      Please read https://github.com/planmill/api/wiki/Getting-started
      
      The API endpoint can be found in your PlanMill instance behind a URL like shown here:
      
      https://{server}/{customer_instance}/api/{api_version}
      
      Where 'server' and 'customer_instance' are replaced by the server address and customer instance name. For example, if your instance name is "abc" and it is hosted on online.planmill.com, the API version 1.5 endpoint would be:
      
      https://online.planmill.com/abc/api/1.5
  - title: Recent changes
    content: |  
      See https://help.planmill.com/help/release-notes
  - title: Other information
    content: |   
      Read more in our wiki https://github.com/planmill/api/wiki

      Check open issues or report a new https://github.com/planmill/api/issues

      Clone us in Github https://github.com/planmill/api.git

      Refer https://github.com/planmill/api/wiki/WebHooks for how to register hooks 

traits:
   all:
      securedBy: [oauth_2.0]
      usage: default settings for all requests
      headers:
        x-PlanMill-Currency:
          description: Recommended to be given. If currency not given in request header, user's current currency set in user settings is used. ISO code of currency in which money values should be shown or saved. Applies to all money attributes of the object, but may be converted by backend to the object specific currency. Some objects and their attributes may not care about the given currency but use the object's own currency
          type: string
          minLength: 3
          maxLength: 3
          required: false
          example: |
            EUR
      responses:
        400:
          headers:
            Content-type:
              type: string
              required: true
              default: |
                application/json;charset=UTF-8
          body:
              application/json: 
                example: |
                 {
                   "message": "ID in GET request URI was malformed",
                   "code": "00003"
                 }
        401:
          headers:
            Content-type:
              type: string
              required: true
              default: |
                application/json;charset=UTF-8
          body:
            application/json: 
              example: |
                {
                  "message": "Nonce too old",
                  "code": "00401"
                }
        403:
          headers:
            Content-type:
              type: string
              required: true
              default: |
                application/json;charset=UTF-8
          body:
            application/json: 
              example: |
                {
                  "message": "Timer is not allowed to go over 24h! Rounding it down.",
                  "code": "00403"
                }
        404:
          headers:
            Content-type:
              type: string
              required: true
              default: |
                application/json;charset=UTF-8
          body:
            application/json:
              example: |
                {
                  "message": "Item not found",
                  "code": "00404"
                }
        429:
          headers:
            Content-type:
              type: string
              required: true
              default: |
                application/json;charset=UTF-8
          body:
            application/json: 
        500:
          headers:
            Content-type:
              type: string
              required: true
              default: |
                application/json;charset=UTF-8
          body:
            application/json:
              example: |
                {
                  "message": "Invalid date pattern",
                  "code": "00500"
                }
   some:
      securedBy: [oauth_2.0]
      usage: default settings for all requests
      headers:
        x-PlanMill-Currency:
          description: Recommended to be given. If currency not given in request header, user's current currency set in user settings is used. ISO code of currency in which money values should be shown or saved. Applies to all money attributes of the object, but may be converted by backend to the object specific currency. Some objects and their attributes may not care about the given currency but use the object's own currency
          type: string
          minLength: 3
          maxLength: 3
          required: false
      responses:
        204:
          description: No HTTP body returned
schemas:
  absence: absence1_5.schema
  account: account1_5.schema
  action: action1_5.schema
  batch: batch1_5.schema
  campaign: campaign1_5.schema
  capacitycalendar: user_capacitycalendars1_5.schema
  contact: contact1_5.schema
  hook: hook1_5.schema
  mail: request_mail1_5.schema 
  opportunity: opportunity1_5.schema
  project: project1_5.schema
  product: product1_5.schema
  pricebook: pricebook1_5.schema
  salesorder: sales_order1_5.schema
  team: team1_5.schema
  resource: resource1_5.schema
  tempfile: tempfile1_5.schema 
  timereport: timereport1_5.schema
  user: user1_5.schema
  vacation: vacation1_5.schema

# write name of the resource before the include and schema always in SINGULAR, i.e. hook not hooks - otherwise the automatic includes won't work
resourceTypes:
   readOnlyCollection:
      is: [all]
      description: Collection of available <<resourcePathName|!pluralize>> in PlanMill. This is a read-only collection.
      get:
        description: Get a list of <<resourcePathName>>
        queryParameters:
          rowcount?:
            type: integer
            minimum: 1
            required: false
            description: It limits the result set amount to the specified limit to avoid API call to return too many records. Default row count is 100
          nextrows?:
            type: integer
            required: false
            description: The number of the next starting row. It is dependent on rowcount. For example, for total 250 items, if rowcount is 100 and nextrows is 101, it return items 101-201
          order?:
            type: integer
            required: false
            description: Orders the results in ascending or descending order. 0=Ascending and 1=Descending. It is used in combination with sort
          sort?:
            type: integer
            required: false
            description: Sorts the results using number that is associated with each column
        responses:
            200:
              body:
                application/json:
                  schema: <<schemaName>>
                  example: |
                    <<exampleCollectionItemArray>>
   readOnlyCollectionItem:
      is: [all]
      description: A single <<resourcePathName|!singularize>> in PlanMill. This is a read-only item.
      get:
        description: View details of a single <<resourcePathName|!singularize>>.
        responses:
          200:
            body:
              application/json:
                example: |
                  <<exampleCollectionItem>>
   collection:
      is: [all]
      description: Collection of available <<resourcePathName|!pluralize>> in PlanMill. See <<resourcePathName|!pluralize>>/meta for list of filters, columns and formats.
      get:
        description: Get a list of <<resourcePathName>>. See <<resourcePathName|!pluralize>>/meta for list of filters, columns and formats.
        queryParameters:
          rowcount?:
            type: integer
            minimum: 1
            required: false
            description: It limits the result set amount to the specified limit to avoid API call to return too many records. Default row count is 100
          nextrows?:
            type: integer
            required: false
            description: The number of the next starting row. It is dependent on rowcount. For example, for total 250 items, if rowcount is 100 and nextrows is 101, it return items 101-201
          order?:
            type: integer
            required: false
            description: Orders the results in ascending or descending order. 0=Ascending and 1=Descending. It is used in combination with sort
          sort?:
            type: string
            required: false
            description: Sorts the results using string that is a JSON attribute
          interval?:
            type: string
            required: false
            description: Interval type, e.g. start, finish, created, or modified. It is used in combination with intervalstart or intervalfinish
          intervalstart?:
            type: string
            required: false
            description: Start date of the interval in UTC format, intervalfinish required 
            example: 2019-03-01T00:00:00.000+0200
          intervalfinish?:
            type: string
            required: false
            description: Finish date of the interval in UTC format, intervalstart required
            example: 2019-03-01T00:00:00.000+0200
        responses:
          200:
            body:
              application/json:
                schema: <<resourcePathName|!singularize>>
                example: |
                  <<exampleCollectionItemArray>>
      post:
        description: Add a new <<resourcePathName|!singularize>> to PlanMill or update existing (if id is given).  See <<resourcePathName|!pluralize>>/meta for list of columns and formats.
        headers:
          Content-Type:
            type: string
            required: true
            default: |
              application/json;charset=UTF-8
            example: |
              application/json;charset=UTF-8
        body:
          application/json:
            schema: <<resourcePathName|!singularize>>
            example: <<exampleCollectionItem>>
        responses:
          201:
            body:
              application/json:
                example: |
                 { "id" : 123456 }
   collectionItem:
      is: [all]
      description: A single <<resourcePathName|!singularize>> in PlanMill.
      get:
        description: View details of a single <<resourcePathName|!singularize>>. See <<resourcePathName|!pluralize>>/meta for list of filters, columns and formats. 
        responses:
          200:
            body:
              application/json:
                schema: <<resourcePathName|!singularize>>
                example: |
                  <<exampleCollectionItem>>
      post:
        description: Update an existing resource <<resourcePathName|!singularize>> to PlanMill.  See <<resourcePathName|!pluralize>>/meta for list of filters, columns and formats.
        headers:
          Content-Type:
            type: string
            required: true
            default: |
              application/json;charset=UTF-8
            example: |
              application/json;charset=UTF-8
        body:
          application/json: 
            schema: <<resourcePathName|!singularize>>
            example: <<exampleCollectionItem>>
        responses:
          204:
            description: No HTTP body returned
      delete:
        description: Remove a <<resourcePathName|!singularize>> from PlanMill.
        responses: 
          204:
            description: No HTTP body returned
   postOnlyCollection:
      is: [all]
      post:
        headers:
          Content-Type:
            type: string
            required: true
            default: |
              application/json;charset=UTF-8
            example: |
              application/json;charset=UTF-8
        body:
          application/json:
            schema: <<resourcePathName|!singularize>>
            example: <<exampleCollectionItem>>
        responses:
          200:
            body:
              application/json:
               example: |
                <<exampleCollectionItem>>
   postOnlyCollectionMultiPart:
      is: [all]
      post:
        description: Add a new <<resourcePathName|!singularize>> to PlanMill.
        headers:
          Content-Type:
            type: string
            required: true
            default: |
              multipart/form-data
            example: |
              multipart/form-data
        queryParameters:
          name:
            required: false
            description: Name of uploaded file
          description:
            required: false
            description: Description of uploaded file
        body:
          multipart/form-data:
            example: |
                Contents of file
        responses:
          201:
            body:
              application/json:
               example: |
                { "id" : 1627 }
   putOnlyCollectionItem:
      is: [all]
      put:
        headers:
          Content-Type:
            type: string
            required: true
            default: |
              application/json;charset=UTF-8
            example: |
              application/json;charset=UTF-8
        body:
            example: <<exampleCollectionItem>>
        responses:
          204:
            description: No HTTP body returned
   timecardCollection:
      is: [all]
      description: Collection of available <<resourcePathName|!pluralize>> in PlanMill.
      get:
        description: Get a list of <<resourcePathName>>.
        queryParameters:
          intervalstart:
            type: string
            required: false
            description: Start date of the interval in UTC format, intervalfinish required 
            example: 2019-03-01T00:00:00.000+0200
          intervalfinish:
            type: string
            required: false
            description: Finish date of the interval in UTC format, intervalstart required
            example: 2019-09-01T00:00:00.000+0200
        responses:
            200:
              body:
                application/json:
                  schema: <<schemaName>>
                  example: |
                    <<exampleCollectionItemArray>>
   putGetCollectionItem:
      is: [some]
      description: A single <<resourcePathName|!singularize>> in PlanMill.
      get:
        description: View details of a single <<resourcePathName|!singularize>>.
        responses:
          200:
            body:
              application/json:
                schema: <<schemaName>>
                example: |
                  <<exampleCollectionItem>>
      put:
        description: Create new or update an existing <<resourcePathName|!singularize>>.
   putDeleteCollectionItem:
      is: [all]
      put:
        headers:
          Content-Type:
            type: string
            required: true
            default: |
              application/json;charset=UTF-8
            example: |
              application/json;charset=UTF-8
        responses:
          204:
            description: No HTTP body returned
        queryParameters:
         setPrimary:
          type: boolean
          example: true | false
          required: true
      delete:
        description: Remove a <<resourcePathName|!singularize>> from PlanMill.
        responses:
          204:
            description: No HTTP body returned
   putCollectionItem:
      is: [all]
      put:
        headers:
          Content-Type:
            type: string
            required: true
            default: |
              application/json;charset=UTF-8
            example: |
              application/json;charset=UTF-8
        responses:
          204:
            description: No HTTP body returned
   putGetDeleteCollectionItem:
      is: [all]
      put:
        headers:
          Content-Type:
            type: string
            required: true
            default: |
              application/json;charset=UTF-8
            example: |
              application/json;charset=UTF-8
        responses:
          204:
            description: No HTTP body returned
      get:
        description: View details of single <<resourcePathName|!singularize>>.
        responses:
          200:
            body:
              application/json: 
                  example: |
                    <<exampleCollectionItem>>
   postGetCollectionItem:
      is: [all]
      post:
        description: Add a new <<resourcePathName|!singularize>> to PlanMill.
        headers:
          Content-Type:
            type: string
            required: true
            default: |
              application/json;charset=UTF-8
            example: |
              application/json;charset=UTF-8
        body:
          application/json:
            schema: <<resourcePathName|!singularize>>
            example: <<exampleCollectionItem>>
        responses:
          200:
            body:
              application/json:
               example: |
                <<exampleCollectionItem>>
   getDeleteCollectionItem:
      is: [all]
      get:
        description: View details of single <<resourcePathName|!singularize>>.
        responses:
          200:
            body:
              application/json:
                  example: |
                    <<exampleCollectionItem>>
      delete:
        description: Remove a <<resourcePathName|!singularize>> from PlanMill.
        responses:
          204:
            description: No HTTP body returned
/absences:
  get:
    queryParameters:
      rowcount:
      nextrows:
      order:
      sort:
      interval:
      intervalstart:
      intervalfinish:
  type:
    collection:
       exampleCollectionItemArray: absence_array1_5.sample
       exampleCollectionItem: absence1_5.sample
  /meta:
      description: Get meta information for absences. Includes resource's fields names and type and related filters
      get:
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: absence_meta1_5.sample
  /{absence_id}:
    type: 
     collectionItem:
        exampleCollectionItem: absence1_5.sample
    /meta:
      description: Get meta information for the updatable fields of the absence
      get:
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: absence_single_meta1_5.sample
/accounts:
  get:
    queryParameters:
      rowcount:
      nextrows:
      order:
      sort:
      interval:
      intervalstart:
      intervalfinish:
  type:
    collection:
       exampleCollectionItemArray: account_array1_5.sample
       exampleCollectionItem: account1_5.sample
  /meta:
      description: Get meta information for accounts. Includes resource's fields names and type and related filters
      get:
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: account_meta1_5.sample
  /{account_id}:
    type: 
     collectionItem:
        exampleCollectionItem: account1_5.sample
    /meta:
        description: Get meta information for the updatable fields of the account
        get:
        type:
          readOnlyCollectionItem:
            exampleCollectionItem: account_single_meta1_5.sample
    /attachments:
      type:
        readOnlyCollection:
          schemaName:
          exampleCollectionItemArray: tempfile_array1_5.sample
      /{attachment_id}:
        type:
          putGetDeleteCollectionItem:
            exampleCollectionItem: Contents of file
/actions:
  get:
    queryParameters:
      rowcount:
      nextrows:
      order:
      sort:
      interval:
      intervalstart:
      intervalfinish:
  type:
    collection:
      exampleCollectionItemArray: action_array1_5.sample
      exampleCollectionItem: action1_5.sample
  /meta:
      description: Get meta information for actions. Includes resource's fields names and type and related filters
      get:
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: action_meta1_5.sample
  /{action_id}:
    type:
      collectionItem:
        exampleCollectionItem: action1_5.sample
    /meta:
        description: Get meta information for the updatable fields of the action
        get:
        type:
          readOnlyCollectionItem:
            exampleCollectionItem: action_single_meta1_5.sample
    /attachments:
      type:
        readOnlyCollection:
          schemaName:
          exampleCollectionItemArray : tempfile_array1_5.sample
      /{attachment_id}:
        type:
          putGetDeleteCollectionItem:
            exampleCollectionItem: Contents of file
/batch: 
  description: Submit multiple API requests as a batch operation. All available individual API requests are supported collected into a JSON array. Responses are also returned as an array in same order as posted. If any request fails, all subsequent requests fail. This is to support execution order inside the batch. All headers apply for all requests unless specific headers applied
  type: 
    postOnlyCollection:       
       exampleCollectionItem: batch1_5.sample
/boards:
  description: Kanban board from PlanMill
  type:
    readOnlyCollection:
      schemaName: board1_5.schema
      exampleCollectionItemArray: board1_5.sample
  /{board_id}:
    get:
      description: View details of a single board
    type:
      collectionItem:
        exampleCollectionItem: board1_5.sample
/boardlists:
  description: Kanban boardlist from PlanMill
  type:
    readOnlyCollection:
      schemaName: boardlist1_5.schema
      exampleCollectionItemArray: boardlist1_5.sample
  /{boardlist_id}:
    get:
      description: View details of a single board list
    type:
      collectionItem:
        exampleCollectionItem: boardlist1_5.sample
/campaigns:
  description: Collection of available campaigns in PlanMill
  get:
    description: Get a list of campaigns
  type:
    collection:
      exampleCollectionItemArray: campaign_array1_5.sample
      exampleCollectionItem: campaign1_5.sample
  /{campaign_id}:
    get:
      description: View details of a single campaign
    type: 
     collectionItem:
        exampleCollectionItem: campaign1_5.sample
/capacitycalendars:
  type:
    readOnlyCollection:
      schemaName: capacitycalendar1_5.schema
      exampleCollectionItemArray: capacitycalendar_array1_5.sample
  /meta:
      description: Get meta information for capacity calendars. Includes resource's fields names and type and related filters
      get:
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: capacitycalendar_meta1_5.sample
/capacitycalendars/{id}/capacity/{date}:
  description: Set a single day's capacity for a capacity calendar
  uriParameters:
    date:
      type: date
      description: Capacity date in UTC format
      example: 2019-03-01T00:00:00.000+0200
      required: true
  type: 
    putOnlyCollectionItem:
      exampleCollectionItem: braces.sample
/contacts:
  get:
    queryParameters:
      nextrows:
      order:
      sort:
      interval:
      intervalstart:
      intervalfinish:
      campaigns:
        type: integer
        required: false
        description: Internal id of campaign to search contacts belonging to specific campaign
  post:
    description: To add a new contact. See contacts/meta for list of columns and formats.
  type:
     collection:
       exampleCollectionItemArray: contact_array1_5.sample
       exampleCollectionItem: contact1_5.sample
  /meta:
      description: Get meta information for contacts. Includes resource's fields names and type and related filters
      get:
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: contact_meta1_5.sample
  /{contact_id}:
    type: 
     collectionItem:
        exampleCollectionItem: contact1_5.sample
    /meta:
        description: Get meta information for the updatable fields of the contact
        get:
        type:
          readOnlyCollectionItem:
            exampleCollectionItem: action_single_meta1_5.sample
    /attachments:
      type:
        readOnlyCollection:
          schemaName:
          exampleCollectionItemArray: tempfile_array1_5.sample
      /{attachment_id}:
        put:
          description: Attach existing file to user.( Tips - use file id from api/1.5/tempfile )
        type:
          putCollectionItem
/enumerations:
  description: Enumerations available in PlanMill
  get:
    queryParameters:
      name: 
        type: string
        description: Name of enumeration
        example: Employee directory.Appraisals.Status
      section:
        type: string
        description: Category of enumeration
        example: Employee directory.Appraisals
  type:
    readOnlyCollectionItem: 
      exampleCollectionItem: enumeration1_5.sample
/exitcriteria:
  description: Kanban board exit criteria from PlanMill
  type:
    readOnlyCollection:
      schemaName: exit_criteria1_5.schema
      exampleCollectionItemArray: exit_criteria1_5.sample
  /{exit_criteria_id}:
    get:
      description: View details of single exit criteria
    type:
      collectionItem:
        exampleCollectionItem: exit_criteria1_5.sample
/exitcriteriastatuses:
  description: Kanban board exit criteria status from PlanMill
  type:
    readOnlyCollection:
      schemaName: exit_criteria_status1_5.schema
      exampleCollectionItemArray: exit_criteria_status1_5.sample
  /{exit_criteria_status_id}:
    get:
      description: View details of single exit criteria status
    type:
      collectionItem:
        exampleCollectionItem: exit_criteria_status1_5.sample
    /comments:
      type: 
        readOnlyCollection:
          schemaName: exit_criteria_status_comments1_5.schema
          exampleCollectionItemArray: exit_criteria_status_comments_array1_5.sample
/expenses:
  get:
    queryParameters:
      rowcount:
      nextrows:
      order:
      sort:
      interval:
      intervalstart:
      intervalfinish:
  type:
    collection:
      exampleCollectionItemArray: expense_array1_5.sample
      exampleCollectionItem: expense1_5.sample
  /meta:
      description: Get meta information for expenses. Includes resource's fields names and type and related filters
      get:
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: expense_meta1_5.sample
  /{expense_id}:
    get:
      headers:
        Accept:
          description: Get expense in PDF format
          required: false
          example: "Accept: application/pdf"
    type:
      collectionItem:
        exampleCollectionItem: expense1_5.sample
    /items:
      type:
        collection:
          exampleCollectionItemArray: expenseitem_array1_5.sample
          exampleCollectionItem: expenseitem1_5.sample
      /{expense_item_id}:
        type:
          collectionItem:
            exampleCollectionItem: expenseitem1_5.sample
        /meta:
          description: Get meta information for the updatable fields of the expense
          get:
          type:
            readOnlyCollectionItem:
              exampleCollectionItem: expenseitem_meta1_5.sample
      /meta:
        description: Get meta information for the updatable fields of the expense
        get:
        type:
          readOnlyCollection:
            schemaName:
            exampleCollectionItemArray: expenseitem_single_meta1_5.sample
    /status:
      description: Increment the status of expenses
      post: 
          description: Inspected = 3, Accepted = 4, Paid = 6, Rejected = 7
      type:
        postOnlyCollection:       
          exampleCollectionItem: expense_status1_5.sample       
    /meta:
      description: Get meta information for the updatable fields of the expense
      get:
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: expense_single_meta1_5.sample
    /attachments:
      type:
        readOnlyCollection:
          schemaName:
          exampleCollectionItemArray: tempfile_array1_5.sample
      /{attachment_id}:
        type:
          putGetDeleteCollectionItem:
            exampleCollectionItem: Contents of file
/hooks:
  description: The currently available subscribable events are listed here along with usage guidelines <p> https://github.com/planmill/api/wiki/WebHooks</p>
  get:
    queryParameters:   
      hook: 
        type: string
        description: Event that is being triggered
      eventUser:
        type: integer
        description: User identifier that is triggering the event
      eventProject:
        type: integer
        description: Project identifier for which the event has been triggered
  type:
    collection: 
      exampleCollectionItemArray: hook_array1_5.sample
      exampleCollectionItem: hook1_5.sample
  /{hook_id}:
    type: 
      collectionItem:
        exampleCollectionItem: hook1_5.sample
/integrations:
  get:
    description: Get a list of available integration templates and statuses.
    body:
      application/json: 
        example: integration_integrations1_5.sample
  /{template}:
    description: Using specific saved integration settings for importing or exporting a set of data to like file containing information of different companies to PlanMill as accounts.
    uriParameters:
      template:
          type: string
          description: source.template
          example: Asiakastieto.DecisionMaker
    post:
      queryParameters:
        file:
          type: integer 
          description: Id of the file to be used in the integration.
          required: false
        delim:
          type: string
          description: Delimiter character used in the source CSV file. Optional but might be needed to be supplied if the delimiter cannot be detected.
          required: false
        quote:
          type: string
          description: Quote character used in the source CSV file
          default: (double quote)
          required: false
      description: Begins a new integration process for this template with a given file.
    delete: 
      description: Cancels the current integration process for this template.
    get: 
      description: Previews data transformation with a given amount of rows.
      queryParameters:
        ignoreFirstRow:
          description: Ignore the first row of a file. Useful with CSV files with header rows.
          default: false
        rows:
          type: integer
          description: Number of rows to preview
          default: 10
      responses:
        200:
          body:
            application/json:
              example: transformation_preview1_5.sample
    /transform:
      put:
        description: Transforms source file to insertable data. Returns a list of any omitted rows due to invalid  field data.
        queryParameters:
          ignoreFirstRow:
            description: Ignore the first row of a file. Useful with CSV files with header rows.
            default: false
        responses:
           202:
      /errors:
        get:
          description: Returns errors occurred during transformation. Uses pagination.
          queryParameters:
            from:
              description: The row number of the first error row to return.
              type: integer
              default: 1
            rows:
              description: The amount of rows to  return.
              type: integer
              default: 100
          responses:
            200:
              body:
                application/json:
                  example: integration_transformation_errors1_5.sample
    /comparison:
      put:
        description: Compares candidate data with existing objects in PlanMill and returns an appropriate update or insert dataset.
        responses:
          202: 
      /conflicts:
        get:
          description: Lists all conflicts by their given import row. In the case that a given import row matches multiple existing objects in the system they are collected as conflicts to be resolved.
          responses:
            200:
              body:
                application/json:
                  example: integration_comparison_conflicts_get1_5.sample
        put:
          description: Resolve matches to multiple existing objects by specifying the preferred object id for each conflict
          body:
            application/json:
              example: integration_comparison_conflicts_resolve1_5.sample
    /import:
      post:
        description: Imports prepared comparison dataset into PlanMill.
        queryParameters:
          mode:
            required: true
            description: Importing mode. Insert will only import new objects, update will only update existing objects and merge will do both
            enum: [insert, update, merge]
          noComparison:
            default: false
            type: boolean
            description: Perform import without comparison by directly using the transformation result
        responses:
          202:
      /errors:
        get:
          description: Returns errors occurred during transformation. Uses pagination.
          queryParameters:
            from:
              description: The row number of the first error row to return.
              type: integer
              default: 1
            rows:
              description: The amount of rows to return.
              type: integer
              default: 100
  #  /transformationsettings:
   #   description: viewing and changing the settings of the integration
    #  type: 
     #   collectionItem:
      #    exampleCollectionItem: include integration1_5.sample
/invoices:
  get:
    queryParameters:
      rowcount:
        type: number
        required: false
        description: Number of rows to be returned. Default is 100.
        example: 250
      cyear:
        type: string
        required: false
        description: Get invoices for specified month. If parameter is missing, always return invoices for current month. Filter is using invoiceDate field.
        example: "12/2018"
  type:
    readOnlyCollection:
      schemaName:
      exampleCollectionItemArray: invoice_array1_5.sample
  /{invoice_id}:
    get:
      headers:
        Accept:
          description: Get invoice in PDF and XML formats. PDF-format works with Invoice + appendix and XML-format works with Finvoice
          enum: [ application/pdf, application/xml ]
          required: false
          example: "Accept: application/pdf"
    type:
      readOnlyCollectionItem:
        exampleCollectionItem: invoice1_5.sample
/languages:
  description: Language strings used for localization available in PlanMill
  get:
    queryParameters:
      name: 
        type: string
        description: Name of language string
        example: System.Generic.Table.No rows found.Create a new product
      section:
        type: string
        description: Category of language
        example: System
      lang:
        type: string
        description: Language code ('en', 'fi') to get language string in desired language
        example: en
  type:
    readOnlyCollectionItem: 
      exampleCollectionItem: language1_5.sample
/me:
  description: Current user information in PlanMill
  get:
    responses:
      200:
        body:
          application/json:
            schema: me1_5.schema
  type:
    readOnlyCollectionItem:
      exampleCollectionItem: me1_5.sample
/mails:
  description: Mail information in PlanMill
  type:
    readOnlyCollection:
      schemaName: mail1_5.schema
      exampleCollectionItemArray: mail_array1_5.sample
  /{mail_id}:
    type:
      getDeleteCollectionItem:
        exampleCollectionItem: mail1_5.sample
    /attachments:
      type:
        readOnlyCollection:
          schemaName:
          exampleCollectionItemArray: tempfile_array1_5.sample
      /{attachment_id}:
        type:
          readOnlyCollectionItem:
            exampleCollectionItem: Contents of file
/opportunities:
  get:
    queryParameters:
      rowcount:
      nextrows:
      order:
      sort:
      interval:
      intervalstart:
      intervalfinish:
  type:
    collection:
       exampleCollectionItemArray: opportunity_array1_5.sample
       exampleCollectionItem: opportunity1_5.sample
  /meta:
      description: Get meta information for opportunities. Includes resource's fields names and type and related filters
      get:
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: opportunity_meta1_5.sample
  /{opportunity_id}:
    type: 
     collectionItem:
        exampleCollectionItem: opportunity1_5.sample
    /attachments:
      type:
        readOnlyCollection:
          schemaName:
          exampleCollectionItemArray: tempfile_array1_5.sample
      /{attachment_id}:
        type:
          putGetDeleteCollectionItem:
            exampleCollectionItem: Contents of file
    /meta:
      description: Get meta information for the updatable fields of the sales orders
      get:
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: opportunity_single_meta1_5.sample
    /items:
      get:
        description: Get a list of opportunity items. See opportunities/{opportunity_id}/items/meta for list of filters, columns and formats
        responses:
          200:
            body:
              application/json:
                schema: opportunityitem1_5.schema
      post:
        description: Add a new opportunity item to PlanMill or update existing (if id is given). See opportunities/{opportunity_id}/items/meta for list of columns and formats
        body:
          application/json:
            schema: opportunityitem1_5.schema
      type:
        collection:
          exampleCollectionItemArray: opportunityitem_array1_5.sample
          exampleCollectionItem: opportunityitem1_5.sample
      /{opportunity_item_id}:
        get:
          description: View details of single item of single opportunity item. #See opportunities/{opportunity_id}/items/{opportunity_item_id}/meta for list of filters, columns and formats
        post:
          description: Update an existing resource single item of single opportunity to PlanMill. #See opportunities/{opportunity_id}/items/{opportunity_item_id}/meta for list of filters, columns and formats
        type:
          collectionItem:
            exampleCollectionItem: opportunityitem1_5.sample
/projects:
  description: reportedHours -field returns minutes like all other effortunit-formatted fields. See /meta -endpoint.
  get:
    queryParameters:
      name:
          description: Filters projects for a specified project name
          type: string
          required: false
          example: name={existing_project_name}
      rowcount:
      nextrows:
      order:
      sort:
      interval:
      intervalstart:
      intervalfinish:
  type:
    collection:
       exampleCollectionItemArray: project_array1_5.sample
       exampleCollectionItem: project1_5.sample
  /meta:
      description: Get meta information for projects. Includes resource's fields names and type and related filters
      get:
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: project_meta1_5.sample
  /{project_id}:
    type: 
     collectionItem:
        exampleCollectionItem: project1_5.sample
    /assignments:
      type:
        readOnlyCollection:
          schemaName: assignment1_5.schema
          exampleCollectionItemArray: assignment_array1_5.sample
      /meta:
          description: Get meta information for the updatable fields of the assignment of a project
          get:
          type:
            readOnlyCollectionItem:
              exampleCollectionItem: project_single_assignment_meta1_5.sample
      /{assignment_id}:
        type:
          readOnlyCollectionItem:
            exampleCollectionItem: assignment1_5.sample
    /attachments:
      type:
        readOnlyCollection:
          schemaName:
          exampleCollectionItemArray: tempfile_array1_5.sample
      /{attachment_id}:
        type:
          putGetDeleteCollectionItem:
            exampleCollectionItem: Contents of file
    /members:
      description: Collection of available team members of a project in PlanMill
      type:
        readOnlyCollection:
          schemaName:
          exampleCollectionItemArray: team_array1_5.sample
      /meta:
          description: Get meta information for the updatable fields of the team member of a project
          get:
          type:
            readOnlyCollectionItem:
              exampleCollectionItem: project_single_member_meta1_5.sample
      /{member_id}:
        description: A single team member of a project in PlanMill
        type:
          putDeleteCollectionItem:
      /external/{external_member_id}:
        description: A single external team member of a project in PlanMill
        type:
          putOnlyCollectionItem:
            exampleCollectionItem: braces.sample
      /editors/{editor_id}:
        description: A single editor team member of a project in PlanMill
        type:
          putDeleteCollectionItem:
      /managers/{manager_id}:
        description: A single manager team member of a project in PlanMill
        type:
          putOnlyCollectionItem:
            exampleCollectionItem: braces.sample
    /meta:
      description: Get meta information for the updatable fields of the project
      get:
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: project_single_meta1_5.sample
    /milestones:
      description: List milestones information for a project
      type:
        readOnlyCollection:
          schemaName:
          exampleCollectionItemArray: project_milestones1_5.sample
      /meta:
        description: Get meta information for the milestone of a project
        get:
        type:
          readOnlyCollectionItem:
            exampleCollectionItem: project_milestones_meta1_5.sample
    /purchases:
      description: List purchase information for a project
      type:
        collection:
         exampleCollectionItemArray: project_purchases_array1_5.sample
         exampleCollectionItem: project_single_purchase1_5.sample
      /id:
        description: Single purchase information for a project
        type:
          collectionItem:
            exampleCollectionItem: project_single_purchase1_5.sample
        /meta:
          description: Get meta information for the purchase of a project
          get:
          type:
            readOnlyCollectionItem:
              exampleCollectionItem: project_single_purchase_meta1_5.sample
      /meta:
        description: Get meta information for the purchase of a project
        get:
        type:
          readOnlyCollection:
            schemaName:
            exampleCollectionItemArray: project_purchases_array_meta1_5.sample
    /tasks:
      description: Please note that this data model might change and might be inconsistent with the schema right now
      get:
        queryParameters:
          rowcount:
          nextrows:
          order:
          sort:    
          interval:
          intervalstart:
          intervalfinish:
      type:
        readOnlyCollection:
          schemaName: task1_5.schema
          exampleCollectionItemArray: task_array1_5.sample
      /meta:
        description: Get meta information for tasks. Includes resource's fields names and type and related filters
        get:
        type:
          readOnlyCollectionItem:
            exampleCollectionItem: task_meta1_5.sample
    /requests:
      description: List requests information for a project
      type:
        readOnlyCollection:
          schemaName:
          exampleCollectionItemArray: project_requests1_5.sample
      /meta:
        description: Get meta information for the request of a project
        get:
        type:
          readOnlyCollectionItem:
            exampleCollectionItem: project_requests_meta1_5.sample
/products:
  description: To manage and list all products in a company. See /meta -endpoint.
  get:
    queryParameters:
      id:
          description: Filters products for a specified products id
          type: integer
          required: false
          example: id={product id}
  post:
    description: To create the new product from the request body
  type:
    collection:
       exampleCollectionItemArray: product_array1_5.sample
       exampleCollectionItem: product1_5.sample
  /meta:
      description: Get meta information for productss. Includes resource's fields names and type and related filters
      get:
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: product_meta1_5.sample
  /{product_id}:
    put:
      description: To update the existing product from the request body with {product_id} in the url
    type:
     putGetDeleteCollectionItem:
        exampleCollectionItem: product1_5.sample
    /attachments:
      type:
        readOnlyCollection:
          schemaName:
          exampleCollectionItemArray: tempfile_array1_5.sample
      /{attachment_id}:
        type:
          putGetDeleteCollectionItem:
            exampleCollectionItem: Contents of file
/pricebooks:
  description: To manage and list all pricebooks in a company. See /meta -endpoint.
  get:
    queryParameters:
      id:
          description: Filters products for a specified pricebook id
          type: integer
          required: false
          example: id={pricebook id}
  type:
    collection:
       exampleCollectionItemArray: pricebook_array1_5.sample
       exampleCollectionItem: pricebook1_5.sample
  /meta:
      description: Get meta information for products. Includes resource's fields names and type and related filters.
      get:
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: pricebook_meta1_5.sample
  /{pricebook_id}:
    type:
     collectionItem:
        exampleCollectionItem: pricebook1_5.sample
    /items:
      type:
        readOnlyCollection:
          schemaName: pricebookitem1_5.schema
          exampleCollectionItemArray: pricebook_item_array1_5.sample
      /meta:
          description: Get meta information for pricebook items. Includes resource's fields names and type and related filters.
          get:
          type:
            readOnlyCollectionItem:
              exampleCollectionItem: pricebookitems_meta1_5.sample
      /{item_id}:
        type:
          putGetDeleteCollectionItem:
            exampleCollectionItem: pricebook_item1_5.sample
        /meta:
              description: Get meta information for pricebook specific item. Includes resource's fields names and type and related filters.
              type:
                readOnlyCollectionItem:
                  exampleCollectionItem: pricebookitems_item_meta1_5.sample
/reports:
  get:
    queryParameters:
      modernOnly:
        description: Only list reports which can be viewed by the report API
        type: boolean
        default: false
        required: false
      exportType:
        description: Export type which can be used to only export top 1 or 2 categories of a report. (Only applies when exporting to pdf, xsl, csv or xml); level1 exports only top level categories; level2 exports only top 2 categories; detailed (default when parameter not set) export all rows 
        enum: [ level1, level2, detailed ]
        required: false
      rowcount:
      nextrows:
      sort:
      order:
  type:
    readOnlyCollection:
      schemaName:
      exampleCollectionItemArray: report_array1_5.sample
  /{reportName}:
    get:
      headers: 
        Accept:
          description: Get report in PDF, CSV, MS-Excel and XML formats
          enum: [ application/json, application/pdf, application/vnd.ms-excel, application/xml, text/csv]
          required: false
          example: "Accept: application/pdf"
      queryParameters:
        exportType:
          description: Export type which can be used to only export top 1 or 2 categories of a report. (Only applies when exporting to json, pdf, xsl, csv or xml); level1 exports only top level categories; level2 exports only top 2 categories; detailed - exports all rows (it is default when parameter is not set)
          enum: [ level1, level2, detailed ]
          required: false
          default: detailed
        paramX:
          description: Report filter parameters which are given in separate query parameters. Check the meta resource for information on the report's parameters
          type: number
          required: false
          example: param1=3&param2=2016&param3=-100
        delim:
          type: string
          description: Delimiter character used to separate fields in exported csv files
          default: (horizontal tab)
    type: 
      readOnlyCollectionItem:
        exampleCollectionItem: report1_5.sample
    /meta:
      description: Get meta information for a report. Includes the report's name in user's language and information on columns and report filter parameters
      get:
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: report_meta1_5.sample
/requests:
  type:
    collection:
      exampleCollectionItemArray: request_array1_5.sample
      exampleCollectionItem: request1_5.sample
  /meta:
      description: Get meta information for requests. Includes resource's fields names and type and related filters
      get:
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: request_meta1_5.sample
  /{request_id}:
    type:
      collectionItem:
        exampleCollectionItem: request1_5.sample
    /meta:
        description: Get meta information for the updatable fields of the request
        get:
        type:
          readOnlyCollectionItem:
            exampleCollectionItem: request_meta1_5.sample
    /assignments:
      type:
        collection:
          exampleCollectionItemArray: assignment_array1_5.sample
          exampleCollectionItem: assignment1_5.sample
      /meta:
          description:
          get:
          type:
            readOnlyCollectionItem:
              exampleCollectionItem: request_single_assignment_meta1_5.sample
      /{assignment_id}:
        type:
          collectionItem:
            exampleCollectionItem: assignment1_5.sample
        /meta:
          description:
          get:
          type:
            readOnlyCollectionItem:
              exampleCollectionItem: request_single_assignment_single_meta1_5.sample
    /attachments:
      type:
        readOnlyCollection:
          schemaName:
          exampleCollectionItemArray: tempfile_array1_5.sample
      /{attachment_id}:
        type:
          putGetDeleteCollectionItem:
            exampleCollectionItem: Contents of file
    /mails:
      type:
        collection:
          exampleCollectionItemArray: request_mail_array1_5.sample
          exampleCollectionItem: request_mail1_5.sample
      /meta:
        description: 
        get:
        type:
          readOnlyCollectionItem:
            exampleCollectionItem: request_single_mail_meta1_5.sample   
/resources:
  description: Collection of resources in PlanMill. Resource is an assignment with it's daily schedule information included.
  get:
    description: Get a list of resources. 
    queryParameters:
      start:
        type: string
        description: Period start date in UTC format. Required if Finish date is given.
        default: Today
        example: 2016-12-31T00:00:00.000+0200
      finish:
        type: string
        description: Period finish date in UTC format
        default: Start date plus one year
        example: 2016-12-31T00:00:00.000+0200
    responses:
      400:
      200:
        body:
          application/json:
            schema: resource1_5.schema
      403:
            headers:
              Content-type:
                type: string
                required: true
                default: |
                  application/json;charset=UTF-8
            body:
              application/json: 
                example: |
                  {
                    "message": "start : Please enter a valid date.",
                    "code": "00403"
                  }, |
                  {
                    "message": "start date missing",
                    "code": "00403"
                  }, |
                  {
                    "message": "finish : Please enter a valid date.",
                    "code": "00403"
                  }
  type:
    readOnlyCollectionItem:
      exampleCollectionItem: resource1_5.schema
/salesorders: 
  get:
    queryParameters:
      rowcount:
      nextrows:
      order:
      sort:
      interval:
      intervalstart:
      intervalfinish:
  type:
    collection:
       exampleCollectionItemArray: salesorder_array1_5.sample
       exampleCollectionItem: salesorder1_5.sample
  /meta:
      description: Get meta information for sales orders. Includes resource's fields names and type and related filters.
      get:
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: salesorder_meta1_5.sample
  /{sales_order_id}:
    type: 
     collectionItem:
        exampleCollectionItem: salesorder1_5.sample
    /attachments:
      type:
        readOnlyCollection:
          schemaName:
          exampleCollectionItemArray: tempfile_array1_5.sample
      /{attachment_id}:
        type:
          putGetDeleteCollectionItem:
            exampleCollectionItem: Contents of file
    /meta:
      description: Get meta information for the updatable fields of the sales orders
      get:
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: salesorder_single_meta1_5.sample
    /items:
      get:
        description: Get a list of sales order items. See salesorder/{sales_order_id}/items/meta for list of filters, columns and formats
        responses:
          200:
            body:
              application/json:
                schema: salesorderitem1_5.schema
      post:
        description: Add a new sales order item to PlanMill or update existing (if id is given). See salesorders/{sales_order_id}/items/meta for list of columns and formats
        body:
          application/json:
            schema: salesorderitem1_5.schema
      type:
        collection:
          exampleCollectionItemArray: salesorderitem_array1_5.sample
          exampleCollectionItem: salesorderitem1_5.sample
      /{id}:
        get:
          description: View details of single item of single sales order item. #See salesorders/{sales_order_id}/items/{sales_order_item_id}/meta for list of filters, columns and formats
        post:
          description: Update an existing resource single item of single sales order to PlanMill. #See salesorders/{sales_order_id}/items/{sales_order_item_id}/meta for list of filters, columns and formats
        type:
          collectionItem:
            exampleCollectionItem: salesorderitem1_5.sample
/tasks/{task_id}:
  type: 
    collectionItem:
      exampleCollectionItem: task1_5.sample
  /meta:
    description: Get meta information for the updatable fields of the task
    get:
    type:
      readOnlyCollectionItem:
        exampleCollectionItem: task_single_meta1_5.sample
  /assignments:
    type:
      collection:
        exampleCollectionItemArray: assignment_array1_5.sample
        exampleCollectionItem: assignment1_5.sample
    /meta:
      description:
      get:
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: task_single_assignment_meta1_5.sample
    /{assignment_id}:
      type:
        collectionItem:
          exampleCollectionItem: assignment1_5.sample
      /meta:
        description:
        get:
        type:
          readOnlyCollectionItem:
            exampleCollectionItem: task_single_assignment_single_meta1_5.sample
  /attachments:
     type:
       readOnlyCollection:
         schemaName:
         exampleCollectionItemArray: tempfile_array1_5.sample
     /{attachment_id}:
       type:
         putGetDeleteCollectionItem:
           exampleCollectionItem: Contents of file
/teams:
  get:
    queryParameters:
      rowcount:
      order:
      sort:
      interval:
      intervalstart:
      intervalfinish:
  type:
    collection:
      exampleCollectionItemArray: team_array1_5.sample
      exampleCollectionItem: team1_5.sample
  /meta:
    description: Get meta information for teams. Includes resource's fields names and type and related filters
    get:
    type:
      readOnlyCollectionItem:
        exampleCollectionItem: team_meta1_5.sample
  /{team_id}:
    type: 
     collectionItem:
      exampleCollectionItem: team1_5.sample
    /meta:
      description: Get meta information for the updatable fields of the team
      get:
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: team_single_meta1_5.sample
    /attachments:
      type:
        readOnlyCollection:
          schemaName:
          exampleCollectionItemArray: tempfile_array1_5.sample
      /{attachment_id}:
        type:
          putGetDeleteCollectionItem:
            exampleCollectionItem: Contents of file
    /members:
     type:
       readOnlyCollection:
        schemaName:
        exampleCollectionItemArray: teammember_array1_5.sample
    /members/{member_id}:
      description: A single team member in PlanMill
      type:
        putDeleteCollectionItem:
    /unitcosts:
      description: List of team member unit costs in PlanMill
      type:
        readOnlyCollection:
          schemaName: team_unitcost1_5.schema
          exampleCollectionItemArray: team_unitcost_array1_5.sample
/tempfiles:
  type:
    postOnlyCollectionMultiPart:
  /{file_id}:
    type:
      getDeleteCollectionItem:
        exampleCollectionItem: Contents of file
/timereports:
  get:
    queryParameters:
      rowcount:
      nextrows:
      order:
      sort:
      period: 
        type: integer
        description: Period like This year, this month etc. See values from /meta endpoint.
      interval:
      intervalstart:
      intervalfinish: 
      status: 
        type: integer
        description: Used in enumeration of status
      billableStatus:
        type: integer
        description: Used in enumeration of billableStatus
      projectfilter:
        type: integer
        description: Id of a project. It could be used for querying multiple projects' time reports by comma-separated id, e.g., "projectfilter=projectid_1,projectid_2"
      person:
        type: integer
        description: Id of a person. Required, but if not given in request, authenticated API user's time reports are returned. For performance reasons time reports of all users can not be returned
  type:
    collection:
       exampleCollectionItemArray: timereport_array1_5.sample
       exampleCollectionItem: timereport1_5.sample
  /meta:
      description: Get meta information for time reports. Includes resource's fields names and type and related filters.
      get:
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: timereport_meta1_5.sample
  /{timereport_id}:
    type: 
     collectionItem:
       exampleCollectionItem: timereport1_5.sample
    /accepted:
      put:
        description: Accepts time reports. It can also accept multiple ids, for example, /timereports/{id},{id},{id}/accepted
      type: 
       putOnlyCollectionItem:
        exampleCollectionItem: braces.sample
    /unaccepted:
      put:
        description: Unaccepts time reports. It can also unaccept multiple ids, for example, /timereports/{id},{id},{id}/accepted
      type: 
       putOnlyCollectionItem:
        exampleCollectionItem: braces.sample
    /meta:
      description: Get meta information for the updatable fields of the timereport
      get:
      type:
       readOnlyCollectionItem:
         exampleCollectionItem: timereport_single_meta1_5.sample
/users:
  get:
    queryParameters:
      rowcount:
      nextrows:
      order:
      sort:    
      account: 
        type: integer
        description: Id of account of a user
      team:
        type: integer
        description: Id of the team which a user belongs to 
      type:
        type: integer
        description: Type of a user
      role:
        type: integer
        description: Id of a role of a user
      city:
        type: string
        description: City of a user
      country:
        type: string
        description: Country of a user 
      superior: 
        type: integer
        description: Id of superior of a user
  post:
    description: Add a new user to PlanMill. See users/meta for list of columns and formats.
  type: 
     collection:
       exampleCollectionItemArray: user_array1_5.sample
       exampleCollectionItem: user1_5.sample
  /meta:
      description: Get meta information for users. Includes resource's fields names and type and related filters
      get:
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: user_meta1_5.sample
  /{user_id}:
    type: 
     collectionItem:
        exampleCollectionItem: user1_5.sample
    /attachments:
      type:
        readOnlyCollection:
          schemaName:
          exampleCollectionItemArray: tempfile_array1_5.sample
      /{id}:
        put:
          description: Attach existing file to PlanMill user.( Tips - use file id from api/1.5/tempfile )  
        type:
          putGetDeleteCollectionItem:
            exampleCollectionItem: Contents of file
    /meta:
      description: Get meta information for the updatable fields of the user.
      get:
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: user_single_meta1_5.sample
    /capacity:
      get:
        queryParameters:
          start:
            type: string
            required: true
            description: Start date of the capacity calendar in UTC format
            example: 2019-03-01T00:00:00.000+0200
          finish:
            type: string
            required: true
            description: Finish date of the capacity calendar in UTC format
            example: 2019-04-01T00:00:00.000+0200
      type:
        readOnlyCollection:
          schemaName: capacity1_5.schema
          exampleCollectionItemArray: capacity1_5.sample
    /capacitycalendars:
      description: Collection of a users capacity calendars in PlanMill.
      get:
        description: Get a list of user capacity calendars.
        queryParameters:
         rowcount:
         nextrows:
         order:
         sort:
      post:
        description: Add a new capacity calendar for user to PlanMill.
      type:
        collection:
          exampleCollectionItemArray: user_capacitycalendars_array1_5.sample
          exampleCollectionItem: user_capacitycalendars1_5_post.sample
    /capacitycalendars/{user_capacitycalendar_id}:
      description: A single capacity calendar.
      get:
        description: View details of single capacity calendar of a single user.
      post:
        description: Update existing single capacity calendar of a single user.
      delete:
        description: Remove user's capacity calendar from planMill.
      type:
        collectionItem:
          exampleCollectionItem: user_capacitycalendars1_5_post.sample
    /overtimebalance:
      get:
        description: View details of single over time balance
        queryParameters:
          finish:
            type: string
            description: Start date of the balance in UTC format
            example: 2019-07-12T00:00:00.000+0200
        responses:
          200:
            body:
              application/json:
                schema: balance1_5.schema
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: balance1_5.sample
    /reportableassignments:
      get:
        description: A single user's reportable assignments in PlanMill. This is a read-only item.
        queryParameters:
          start:
            type: string
            description: Start date of the capacity calendar in UTC format
            example: 2019-03-07T00:00:00.000+0200
          finish:
            type: string
            description: Finish date of the capacity calendar in UTC format
            example: 2020-01-01T00:00:00.000+0200
      type:
        readOnlyCollection:
          schemaName: reportable_assignments1_5.schema
          exampleCollectionItemArray: reportable_assignments_array1_5.sample
    /timebalance:
      get:
        queryParameters:
          finish:
            type: string
            description: Start date of the balance in UTC format
            example: 2019-12-3T00:00:00.000+0200
        responses:
          200:
            body:
              application/json:
                schema: balance1_5.schema
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: balance1_5.sample
    /traveltimebalance:
      get:
        queryParameters:
          finish:
            type: string
            description: Start date of the balance in UTC format
            example: 2019-09-30T00:00:00.000+0200
        responses:
          200:
            body:
              application/json:
                schema: balance1_5.schema
      type:
        readOnlyCollectionItem:
          exampleCollectionItem: balance1_5.sample
    /timecard:
      type:
        timecardCollection:
          schemaName: timecard1_5.schema
          exampleCollectionItemArray: timecard_array1_5.sample
      /{date}:
        uriParameters:
          date:
            type: date
            description: Time card date in UTC format
            example: 2020-04-01T00:00:00.000+0300
            required: true
        type:
          putGetCollectionItem:
            schemaName: timecard1_5.schema
            exampleCollectionItem: timecard1_5.sample
    /unitcosts:
      description: List of a user's unit costs in PlanMill
      type:
        readOnlyCollection:
          schemaName: user_unitcost1_5.schema
          exampleCollectionItemArray: user_unitcost_array1_5.sample
    /vacations:
      get:
        description: Get a list of vacations.
        queryParameters:
          rowcount:
          order:
          sort:
          interval:
          intervalstart:
          intervalfinish:
      type: 
         collection:
           exampleCollectionItemArray: vacation_array1_5.sample
           exampleCollectionItem: vacation1_5.sample
      post:
        description: Add new vacation details to the user.See vacations/meta for list of columns and formats.
      /{vacation_id}:
        get:
          description: View details of single vacation.
        post:
          description: Update an existing resource vacation to PlanMill.
        type: 
           collectionItem:
             exampleCollectionItem: vacation1_5.sample

# /competences:
# /contracts:
# /forecasts:
# /revenues:
# /sessions:
